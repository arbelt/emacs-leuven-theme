# Hey Emacs, this is a -*- org -*- file ...
#+TITLE:     Org customized views
#+AUTHOR:    Fabrice Niessen
#+EMAIL:     (concat "fniessen" at-sign "pirilampo.org")
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS:   H:4 num:nil

#+PROPERTY:  tangle org-custom-agenda-views.el
#+PROPERTY:  padline yes
#+PROPERTY:  eval no

#+SETUPFILE: ~/src/org-style/setup/bigblow-local-abs.setup

* Private Notes                                                      :noexport:

At the beginning, we've put way to many tasks either as scheduled or deadline
because the unique interaction with Org mode was via the agenda view, and we
did not want to loose some tasks out of our view.

When we add more consolidated views (multi-blocks), we gain confidence that we
won't loose tasks (together with reviews), and we're finally able to use
deadline and scheduled for what they're meant.

A *scheduled* date is a *start date*.

A *deadline* is a ultimate finish date. It can have a custom *reminder* to receive
alerts for approaching due dates (in the *warning period*); it /must be updated
every time we want to snooze the reminder/ (once a day, week, month). We can do
such an update via =C-u C-u C-c C-d=.

* Key bindings

#+begin_src emacs-lisp
  ;; display the calendar and tasks for today
  (global-set-key
    (kbd "<f7>") (kbd "C-c a r d"))

  ;; display the hotlist
  (global-set-key
    (kbd "<S-f7>") (kbd "C-c a f ."))

  ;; display TODO entries
  (global-set-key
    (kbd "<C-f7>") (kbd "C-c a f h"))

  ;; display calendar for 7 days
  (global-set-key
    (kbd "<C-M-f7>") (kbd "C-c a r c 7"))
#+end_src

* Description

Vocabulary:
- SCHEDULED = start time
- Undated items
- Planned
- Uncategorized

Tasks views:
- Active
- Starred (= with an explicit priority)
- Completed
- Due today (only today)
- Due this week (only for current week: from Monday to Sunday included)
- Late (all overdue + today)
- Assigned to me
- Created by me
- With files attached

Sorted by:
- Creation date
- Last changed (= default)
- Project
- Creator
- Deadline
- Priority
- Title

Ordered by:
- Asc
- Desc (= default)

Get your errand list for this week by filtering the agenda (for the current
week) on the =errands= tag.

* Views

#+begin_src emacs-lisp
    ;; custom commands for the agenda -- start with a clean slate
    (setq org-agenda-custom-commands nil)
#+end_src

#+begin_note
Puisque l'on peut facilement filter par catégorie, on peut imaginer qu'il est
*inutile de trier par catégorie* : il suffit de faire =<= pour voir toutes les
tâches d'une catégorie.
#+end_note

You should be able to work with Org items with the mapping and property APIs:

- (info "(org) Using the property API")
- (info "(org) Using the mapping API")

* COLLECT

#+begin_src emacs-lisp
    (add-to-list 'org-agenda-custom-commands
                 '("c" . "COLLECT...") t)
#+end_src

** CollectBox

The CollectBox is the default place where you collect your thoughts.

#+begin_src emacs-lisp
    ;; CollectBox
    (add-to-list 'org-agenda-custom-commands
                 `("cd" "CollectBox"
                   alltodo ""
                   ((org-agenda-files (list ,org-default-notes-file)))) t)
#+end_src

* FOCUS

#+begin_src emacs-lisp
    (add-to-list 'org-agenda-custom-commands
                 '("f" . "FOCUS...") t)
#+end_src

** Today

FIXME Add calendar events for today, calendar events for tomorrow and scheduled for today?

Completed tasks can be "in review" or "need verification", that's why they have
their own section.

#+begin_src emacs-lisp
    (add-to-list 'org-agenda-custom-commands
                 '("f." "Today"
                   ;; list of all TODO entries with deadline today
                   ((tags-todo "DEADLINE=\"<+0d>\""
                               ((org-agenda-overriding-header "DUE TODAY")
                                (org-agenda-skip-function
                                 '(org-agenda-skip-entry-if 'notdeadline))
                                (org-agenda-sorting-strategy '(priority-down))))
                    ;; list of all TODO entries with deadline before today
                    (tags-todo "DEADLINE<\"<+0d>\""
                               ((org-agenda-overriding-header "OVERDUE")
                                (org-agenda-skip-function
                                 '(org-agenda-skip-entry-if 'notdeadline))
                                (org-agenda-sorting-strategy '(priority-down))))
                    ;; list of all TODO entries completed today
                    (todo "TODO|DONE|CANX" ; includes repeated tasks (back in TODO)
                               ((org-agenda-overriding-header "COMPLETED TODAY")
                                (org-agenda-skip-function
                                 '(org-agenda-skip-entry-if
                                   'notregexp
                                   (format-time-string
                                    (concat
                                     " \\("
                                     "CLOSED: \\[%Y-%m-%d"
                                     "\\|"
                                     "- State \"\\(DONE\\|CANX\\)\" * from .* \\[%Y-%m-%d"
                                     "\\|"
                                     "- State .* ->  *\"\\(DONE\\|CANX\\)\" * \\[%Y-%m-%d"
                                     "\\) "))))
                                (org-agenda-sorting-strategy '(priority-down)))))) t)
#+end_src

#+begin_src emacs-lisp
    (add-to-list 'org-agenda-custom-commands
                '("fc" "Closed this week (TEST)"
                  tags "CLOSED>\"<-1w>\""
                  ((org-agenda-sorting-strategy '(priority-down)))) t)
#+end_src

#+begin_note
Checking that =DEADLINE= <>"" can be implemented by =(org-agenda-skip-function
'(org-agenda-skip-entry-if 'notdeadline))=.

Though, we should check which one is more responsive.
#+end_note

** 7 Days

Forecast:
- Overdue
- 7 days

FIXME A task with a DEADLINE and a =-0d= specifier is not shown!!!  Well shown in
the hotlist!!!

#+begin_src emacs-lisp
    (add-to-list 'org-agenda-custom-commands
                 '("f7" "7 Days"
                   ((tags-todo "DEADLINE=\"<+0d>\""
                               ((org-agenda-overriding-header "DUE TODAY")
                                (org-agenda-skip-function
                                 '(org-agenda-skip-entry-if 'notdeadline))
                                (org-agenda-sorting-strategy '(priority-down))))
                    (tags-todo "DEADLINE=\"<+1d>\""
                               ((org-agenda-overriding-header "DUE TOMORROW")
                                (org-agenda-skip-function
                                 '(org-agenda-skip-entry-if 'notdeadline))
                                (org-agenda-sorting-strategy '(priority-down))))
                    (tags-todo "DEADLINE=\"<+2d>\""
                               ((org-agenda-overriding-header
                                 (upcase (format-time-string
                                          "DUE BY %a %d"
                                          (time-add (current-time)
                                                    (seconds-to-time (* 2 86400))))))
                                (org-agenda-skip-function
                                 '(org-agenda-skip-entry-if 'notdeadline))
                                (org-agenda-sorting-strategy '(priority-down))))
                    (tags-todo "DEADLINE=\"<+3d>\""
                               ((org-agenda-overriding-header
                                 (upcase (format-time-string
                                          "DUE BY %a %d"
                                          (time-add (current-time)
                                                    (seconds-to-time (* 3 86400))))))
                                (org-agenda-skip-function
                                 '(org-agenda-skip-entry-if 'notdeadline))
                                (org-agenda-sorting-strategy '(priority-down))))
                    (tags-todo "DEADLINE=\"<+4d>\""
                               ((org-agenda-overriding-header
                                 (upcase (format-time-string
                                          "DUE BY %a %d"
                                          (time-add (current-time)
                                                    (seconds-to-time (* 4 86400))))))
                                (org-agenda-skip-function
                                 '(org-agenda-skip-entry-if 'notdeadline))
                                (org-agenda-sorting-strategy '(priority-down))))
                    (tags-todo "DEADLINE=\"<+5d>\""
                               ((org-agenda-overriding-header
                                 (upcase (format-time-string
                                          "DUE BY %a %d"
                                          (time-add (current-time)
                                                    (seconds-to-time (* 5 86400))))))
                                (org-agenda-skip-function
                                 '(org-agenda-skip-entry-if 'notdeadline))
                                (org-agenda-sorting-strategy '(priority-down))))
                    (tags-todo "DEADLINE=\"<+6d>\""
                               ((org-agenda-overriding-header
                                 (upcase (format-time-string
                                          "DUE BY %a %d"
                                          (time-add (current-time)
                                                    (seconds-to-time (* 6 86400))))))
                                (org-agenda-skip-function
                                 '(org-agenda-skip-entry-if 'notdeadline))
                                (org-agenda-sorting-strategy '(priority-down))))
                    (tags-todo "DEADLINE=\"<+7d>\""
                               ((org-agenda-overriding-header
                                 (upcase (format-time-string
                                          "DUE BY %a %d"
                                          (time-add (current-time)
                                                    (seconds-to-time (* 7 86400))))))
                                (org-agenda-skip-function
                                 '(org-agenda-skip-entry-if 'notdeadline))
                                (org-agenda-sorting-strategy '(priority-down)))))) t)
#+end_src

** Hotlist

The *hotlist* is a convenient and smart way to see (in a single, clear overview)
the *most urgent and important tasks* for you to be working on right now.

It contains /active/ tasks (that is, not completed) that:

- are *overdue*, or
- are *due soon* (in the next 7 days), or
- have a *high priority* (=#A=), or
- are *FLAGGED*.

There is an exception to the above rule: *tasks with a future =SCHEDULED= date
will be hidden* from the hotlist regardless of their =DEADLINE= date, priority or
flag.

In other words, to be listed in the hotlist, tasks must have as well
a =SCHEDULED= date that is:

- on or before today, or
- blank.

# Why?  Because scheduling also means: don't show me that task before that
# date. I will review it starting on the scheduled date, not now!

*************** TODO Rajouter les SCHEDULED today dans la hotlist ?
*************** END

#+begin_src emacs-lisp
    (add-to-list 'org-agenda-custom-commands
                 '("fh" "Hotlist"
                   ;; tags-todo "DEADLINE<=\"<+1w>\"|PRIORITY={A}|FLAGGED"
                   ((tags-todo "DEADLINE<\"<+0d>\""
                               ((org-agenda-overriding-header "OVERDUE")))
                    (tags-todo "DEADLINE>=\"<+0d>\"+DEADLINE<=\"<+1w>\""
                               ((org-agenda-overriding-header "DUE IN NEXT 7 DAYS")))
                    (tags-todo "DEADLINE=\"\"+PRIORITY={A}|DEADLINE>\"<+1w>\"+PRIORITY={A}"
                               ((org-agenda-overriding-header "HIGH PRIORITY")))
                    (tags-todo "DEADLINE=\"\"+FLAGGED|DEADLINE>\"<+1w>\"+FLAGGED"
                               ((org-agenda-overriding-header "FLAGGED")
                                (org-agenda-skip-function
                                 '(org-agenda-skip-entry-when-regexp-matches))
                                (org-agenda-skip-regexp "\\[#A\\]")))
                    ;; (tags-todo "DEADLINE=\"\"+PRIORITY<>{A}+FLAGGED|DEADLINE>\"<+1w>\"+PRIORITY<>{A}+FLAGGED"
                    ;;            ((org-agenda-overriding-header "...FLAGGED...")))
                    )
                   ((org-agenda-todo-ignore-scheduled 'future)
                    (org-agenda-sorting-strategy '(deadline-down)))) t)
#+end_src

The hotlist is the perfect thing to *review each morning* to know what you need
to do each day.

FIXME Add an *HotNFast* list, which is everything on the Hotlist that takes less
than 10 minutes. Tasks without a time estimate will NOT show up in this list.

#+begin_src emacs-lisp
    (add-to-list 'org-agenda-custom-commands
                 '("fe" "Effort less than 1 hour"
                   tags-todo "Effort<>{}+Effort<\"1:00\""
                   ((org-agenda-todo-ignore-scheduled 'future))) t)
#+end_src

    During my review, I bring up the Projects I need to review, change due
    dates and priorities as appropriate. If tasks have no due dates and are not
    priority 1, then they won't show up on a Hotlist, so here's the time when
    tasks get real dates or become priority 1 (next action). Otherwise, I don't
    want to look at them in my Hotlists. Then I use Hotlists to get things done
    (ooops) in a Forster kind of way, depending on my context.

    There is one task in each Folder that repeats as often as I need to review
    that Folder. Some Folders I only need to review weekly or monthly. These
    review tasks get the gtd tag.

** Scheduled

#+begin_warning
A deadline with no scheduling information has an implicit scheduled date equal
to the deadline date.
#+end_warning

** Projects

A *project* is any desired goal that requires *more than one action* to achieve.

Making a decision about the order of your actions is very important.

A project where the actions need to be performed in sequence is called
a *sequential project*. A project where the actions can be performed in any order
is called a *parallel project*.

The project type can be specified either in XXX.

#+begin_src emacs-lisp
    (add-to-list 'org-agenda-custom-commands
                 '("fP" "Projects"
                   tags-todo "project-DONE-CANX"
                   ((org-agenda-overriding-header "Projects (High Level)")
                    (org-agenda-sorting-strategy nil))) t)
#+end_src

Comment identifier un projet ?
- Identifier les tâches qui ont des sous-tâches?
- Mettre un tag PROJ?
- Avoir des tâches dans section "(Single) Actions" ou dans section "Projects"?

From Tracks:
- Active Projects
- Hidden Projects
- Completed Projects

* REVIEW

See http://www.omnigroup.com/ftp/pub/software/macosx/extras/omnifocus/gtdandomnifocus.pdf
for mode dedicated solely to review!

#+begin_src emacs-lisp
    (add-to-list 'org-agenda-custom-commands
                 '("r" . "REVIEW...") t)
#+end_src

** All tasks

#+begin_src emacs-lisp
    (add-to-list 'org-agenda-custom-commands
                 '("ra" . "All Tasks...") t)
#+end_src

*** Sorted by due date

All *tasks*, grouped by *due date*:
- Overdue
- Due today
- Due tomorrow
- Due within a week (next 5 days)
- Due within a month (next 3 weeks)
- Due later
- No due date (includes CollectBox)
- Completed

**** All tasks (tags view)

#+begin_src emacs-lisp
    (add-to-list 'org-agenda-custom-commands
                 '("rad" "All Tasks (grouped by Due Date)"
                   ((tags-todo "DEADLINE<\"<+0d>\""
                               ((org-agenda-overriding-header "OVERDUE")
                                (org-agenda-skip-function
                                 '(org-agenda-skip-entry-if 'notdeadline))))
                    (tags-todo "DEADLINE=\"<+0d>\""
                               ((org-agenda-overriding-header "DUE TODAY")
                                (org-agenda-skip-function
                                 '(org-agenda-skip-entry-if 'notdeadline))))
                    (tags-todo "DEADLINE=\"<+1d>\""
                               ((org-agenda-overriding-header "DUE TOMORROW")
                                (org-agenda-skip-function
                                 '(org-agenda-skip-entry-if 'notdeadline))))
                    (tags-todo "DEADLINE>\"<+1d>\"+DEADLINE<=\"<+7d>\""
                               ((org-agenda-overriding-header "DUE WITHIN A WEEK")
                                (org-agenda-skip-function
                                 '(org-agenda-skip-entry-if 'notdeadline))))
                    (tags-todo "DEADLINE>\"<+7d>\"+DEADLINE<=\"<+28d>\""
                               ((org-agenda-overriding-header "DUE WITHIN A MONTH")
                                (org-agenda-skip-function
                                 '(org-agenda-skip-entry-if 'notdeadline))))
                    (tags-todo "DEADLINE>\"<+28d>\""
                               ((org-agenda-overriding-header "DUE LATER")
                                (org-agenda-skip-function
                                 '(org-agenda-skip-entry-if 'notdeadline))))

                    ;; (todo ""
                    ;;            ((org-agenda-overriding-header "NO DUE DATE")
                    ;;             (org-agenda-skip-function
                    ;;              '(org-agenda-skip-entry-if 'deadline))))
                    (tags-todo "TODO={STRT}"
                               ((org-agenda-overriding-header "NO DUE DATE / STARTED")
                                (org-agenda-skip-function
                                 '(org-agenda-skip-entry-if 'deadline))))
                    (tags-todo "TODO<>{STRT\\|WAIT\\|SDAY}"
                               ((org-agenda-overriding-header "NO DUE DATE / NEXT")
                                (org-agenda-skip-function
                                 '(org-agenda-skip-entry-if 'deadline))))
                    (tags-todo "TODO={WAIT}"
                               ((org-agenda-overriding-header "NO DUE DATE / WAITING FOR")
                                (org-agenda-skip-function
                                 '(org-agenda-skip-entry-if 'deadline))))
                    (tags-todo "TODO={SDAY}"
                               ((org-agenda-overriding-header "NO DUE DATE / SOMEDAY")
                                (org-agenda-skip-function
                                 '(org-agenda-skip-entry-if 'deadline))))

                    (todo "DONE|CANX"
                          ((org-agenda-overriding-header "COMPLETED"))))
                   ((org-agenda-sorting-strategy '(priority-down))
                    (org-agenda-write-buffer-name "All Tasks (grouped by Due Date)"))
                   "~/org___all-tasks-by-due-date.pdf") t)

    (add-to-list 'org-agenda-custom-commands
                 '("ra1" "All Tasks (sorted by Due Date)"
                   alltodo ""
                   ((org-agenda-overriding-header "All Tasks (sorted by Due Date)")
                    (org-agenda-sorting-strategy '(deadline-up)))) t) ; FIXME sort not OK
#+end_src

**** All tasks (agenda view)

FIXME Tasks with pre-warning of 45d do not appear in the first block; well in
every other one!!!  Bad.

#+begin_src emacs-lisp
    (add-to-list 'org-agenda-custom-commands
                 `("ra2" "All active tasks, by due date"
                   ((agenda ""
                            ((org-agenda-overriding-header "Today")
                             ;; FIXME We don't see "timed" DEADLINE
                             (org-agenda-skip-function
                              (lambda ()
                                (let* ((dl (org-entry-get nil "DEADLINE")))
                                  (if (or (not dl)
                                          (equal dl "")
                                          (org-time> dl (org-time-today)))
                                      (progn (outline-next-heading) (point))))))
                             (org-agenda-skip-scheduled-if-deadline-is-shown t)
                             (org-agenda-span 'day)
                             (org-deadline-warning-days 0)))
                    (agenda ""
                            ((org-agenda-entry-types '(:deadline))
                             (org-agenda-overriding-header "Tomorrow")
                             (org-agenda-skip-function
                              '(leuven--skip-entry-unless-deadline-in-n-days-or-more 1))
                             (org-deadline-warning-days 1)))
                    (agenda ""
                            ((org-agenda-overriding-header "Next 5 days")
                             (org-agenda-skip-function
                              '(leuven--skip-entry-unless-deadline-in-n-days-or-more 2))
                             (org-deadline-warning-days 7)))
                    (agenda ""
                            ((org-agenda-format-date "")
                             (org-agenda-overriding-header "Next 3 weeks")
                             (org-agenda-skip-function
                              '(leuven--skip-entry-unless-deadline-in-n-days-or-more 7))
                             (org-deadline-warning-days 28))))
                   ((org-agenda-deadline-faces '((0.0 . default)))
                    (org-agenda-clockreport-mode nil)
                    (org-agenda-format-date "")
                    (org-agenda-span 'day)
                    (org-agenda-sorting-strategy '(deadline-up))
                    (org-agenda-use-time-grid nil)
                    (org-agenda-write-buffer-name "Reminders"))) t)
#+end_src

#+begin_src emacs-lisp
    (defun leuven--skip-entry-unless-deadline-in-n-days-or-more (n)
      "Skip entries that have no deadline, or that have a deadline earlier than in N days."
      (let* ((dl (org-entry-get nil "DEADLINE")))
        (if (or (not dl)
                (equal dl "")
                (org-time< dl (+ (org-time-today) (* n 86400))))
            (progn (outline-next-heading) (point)))))
#+end_src

#+begin_src emacs-lisp
    (defun leuven--skip-entry-unless-overdue-deadline ()
      "Skip entries that have no deadline, or that have a deadline later than or equal to today."
      (let* ((dl (org-entry-get nil "DEADLINE")))
        (if (or (not dl)
                (equal dl "")
                (org-time>= dl (org-time-today)))
            (progn (outline-next-heading) (point)))))

    (defun leuven--skip-entry-if-past-deadline ()
      "Skip entries that have a deadline earlier than today."
      (let* ((dl (org-entry-get nil "DEADLINE")))
        (if (org-time< dl (org-time-today))
            (progn (outline-next-heading) (point)))))

    (defun leuven--skip-entry-if-deadline-in-less-than-n-days-or-schedule-in-less-than-n-days (n1 n2)
      "Skip entries that have a deadline in less than N1 days, or that have a
    scheduled date in less than N2 days, or that have no deadline nor scheduled."
      (let* ((dl (org-entry-get nil "DEADLINE"))
             (sd (org-entry-get nil "SCHEDULED")))
        (if (or (and dl
                     (not (equal dl ""))
                     (org-time< dl (+ (org-time-today) (* n1 86400))))
                (and sd
                     (not (equal sd ""))
                     (org-time< sd (+ (org-time-today) (* n2 86400))))
                (and (or (not dl)       ; no deadline
                         (equal dl ""))
                     (or (not sd)       ; nor scheduled
                         (equal sd ""))))
            (progn (outline-next-heading) (point)))))

    (defun leuven--skip-entry-if-deadline-or-schedule ()
      "Skip entries that have a deadline or that have a scheduled date."
      (let* ((dl (org-entry-get nil "DEADLINE"))
             (sd (org-entry-get nil "SCHEDULED")))
        (if (or (and dl
                     (not (equal dl "")))
                (and sd
                     (not (equal sd ""))))
            (progn (outline-next-heading) (point)))))
#+end_src

#+begin_src emacs-lisp
    (add-to-list 'org-agenda-custom-commands
                 '("ra3" "Agenda for all TODO entries"
                   ((agenda ""
                            ((org-agenda-format-date "")
                             (org-agenda-overriding-header "Past due")
                             (org-agenda-skip-function
                              'leuven--skip-entry-unless-overdue-deadline)
                             (org-deadline-warning-days 0)))
                    (agenda ""
                            ((org-agenda-format-date "")
                             (org-agenda-overriding-header "Today/tomorrow")
                             (org-agenda-skip-function
                              'leuven--skip-entry-if-past-deadline)
                             (org-agenda-span 2)
                             (org-agenda-use-time-grid t)
                             (org-deadline-warning-days 0)))
                    (agenda ""
                            ((org-agenda-format-date "")
                             (org-agenda-overriding-header "Next 12 days")
                             (org-agenda-skip-function
                              '(leuven--skip-entry-unless-deadline-in-n-days-or-more 2))
                             (org-deadline-warning-days 14)))
                    (todo ""
                          ((org-agenda-overriding-header "Later")
                           (org-agenda-skip-function
                            '(leuven--skip-entry-if-deadline-in-less-than-n-days-or-schedule-in-less-than-n-days 15 2))
                           (org-agenda-sorting-strategy '(ts-up))))
                    (todo ""
                          ((org-agenda-overriding-header "No due date")
                           (org-agenda-skip-function
                            'leuven--skip-entry-if-deadline-or-schedule))))
                   ((org-agenda-clockreport-mode nil)
                    (org-agenda-prefix-format " %i %?-12t% s")
                    (org-agenda-span 'day)
                    (org-agenda-use-time-grid nil)
                    (org-agenda-write-buffer-name "List Review"))
                   "~/org___agenda-all-todo-entries.html") t)
#+end_src

*** Sorted by priority

All *tasks*, grouped by *priority*:
- Priority A
- Priority B
- No explicit priority (= priority B, implicitly)
- Priority C
- Completed

#+begin_src emacs-lisp
    (add-to-list 'org-agenda-custom-commands
                 '("rap" "All Tasks (grouped by Priority)"
                   ((tags-todo "PRIORITY={A}"
                               ((org-agenda-overriding-header "HIGH")))
                    (tags-todo "PRIORITY={B}"
                               ((org-agenda-overriding-header "MEDIUM")))
                    (tags-todo "PRIORITY=\"\""
                               ((org-agenda-overriding-header "NONE"))) ; = medium
                    (tags-todo "PRIORITY={C}"
                               ((org-agenda-overriding-header "LOW")))
                    (todo "DONE|CANX"
                          ((org-agenda-overriding-header "COMPLETED")
                           (org-agenda-sorting-strategy '(priority-down)))))) t)
#+end_src

** Calendar

#+begin_src emacs-lisp
    (add-to-list 'org-agenda-custom-commands
                 '("rc" . "Calendar...") t)
#+end_src

FIXME Faire 7 vues agenda "jour" pour avoir un séparateur customizable...

#+begin_src emacs-lisp
    (add-to-list 'org-agenda-custom-commands
                 '("rc7" "Events and appointments for 7 days"
                   agenda ""
                   ((org-agenda-entry-types '(:timestamp :sexp))
                    ;; (org-agenda-overriding-header "Calendar for 7 days")
                    ;; (org-agenda-repeating-timestamp-show-all t)
                    (org-agenda-span 'week)
                    (org-agenda-format-date "\n%a %d")
                    ;; (org-agenda-date-weekend ... new face ...)
                    (org-agenda-time-grid nil))) t)
#+end_src

View all your tasks that are due on a certain date in a familiar, calendar-like
view.

#+begin_src emacs-lisp
    ;; calendar view for org-agenda
    (when (locate-library "calfw-org")

      (autoload 'cfw:open-org-calendar "calfw-org"
        "Open an Org schedule calendar." t)

      (add-to-list 'org-agenda-custom-commands
                   '("rcm" "Calendar for current month"
                     (lambda (&rest ignore)
                       (cfw:open-org-calendar))) t)

      ;; (defun cfw:open-org-calendar-non-work (&args)
      ;;   (interactive)
      ;;   (let ((org-agenda-skip-function 'org-agenda-skip-work))
      ;;     (cfw:open-org-calendar)))
      ;;
      ;; (add-to-list 'org-agenda-custom-commands
      ;;              '("c" "Calendar (non-work) for current month"
      ;;                cfw:open-org-calendar-non-work) t)

      )
#+end_src

** Timeline

=org-timeline= has weaknesses and although not officially deprecated, should be
best avoided.  See Carsten's comments in
http://thread.gmane.org/gmane.emacs.orgmode/39368/focus=39465

#+begin_src emacs-lisp
    ;; show what happened today
    (add-to-list 'org-agenda-custom-commands
                 '("rl" "Timeline for today"
                   ((agenda ""
                            ((org-agenda-clockreport-mode t)
                             (org-agenda-entry-types '(:timestamp))
                             (org-agenda-log-mode-items '(clock closed))
                             (org-agenda-show-log t)
                             (org-agenda-span 'day))))) t)
#+end_src

** Completed Tasks

What tasks have been *completed recently* (in this project): in the last day,
week, or two weeks?

Here, you will see a list of all completed tasks, with the most recently
completed at the top.

FIXME Group completed tasks per date of completion.

*** Cleanup

#+begin_src emacs-lisp
    (add-to-list 'org-agenda-custom-commands
                 '("rx" "Completed tasks with no CLOCK lines"
                   ((todo "DONE|CANX"
                               ((org-agenda-overriding-header "Completed tasks with no CLOCK lines")
                                (org-agenda-skip-function
                                 '(org-agenda-skip-entry-if
                                   'regexp
                                   (format-time-string "  CLOCK: .*--.* =>  .*")))
                                (org-agenda-sorting-strategy '(priority-down)))))) t)
#+end_src

Cleanup:

- Done actions older than 14 days
- Inactive ticklers older than 14 days
- Completed projects older than 14 days

** Recent items

*************** TODO Add report "Recently added/completed/modified"
Recently done.
*************** END

#+begin_src emacs-lisp
    (add-to-list 'org-agenda-custom-commands
                 '("rr" "Recent items (past 7 days)"
                   ;; faster than tags
                   agenda ""
                   ((org-agenda-start-day "-7d")
                    (org-agenda-span 7)
                    (org-agenda-repeating-timestamp-show-all nil)
                    ;; %s is only for agenda views
                    ;; (org-agenda-prefix-format "%s")
                    ;; maybe not make much difference ka
                    ;; (org-agenda-use-tag-inheritance nil)
                    (org-agenda-inactive-leader "Inactive:  ")
                    (org-agenda-include-inactive-timestamps t))) t)
#+end_src

** Timesheet

Track time.

https://www.freshbooks.com/timesheet#date/2014-02-17

#+begin_src emacs-lisp
    (add-to-list 'org-agenda-custom-commands
                 '("rt" "Timesheet"
                   ((agenda ""
                            ((org-agenda-clockreport-mode t)
                             (org-agenda-overriding-header "TIMESHEET")
                             (org-agenda-show-log 'clockcheck)
                             (org-agenda-span 'day))))) t)
#+end_src

** Time tracking

Generate a time tracking report:
https://confluence.atlassian.com/display/JIRA/Time+Tracking+Report

FIXME Show percent completion

http://www.techsupportalert.com/best-free-project-time-keeping-utility.htm

*************** TODO Add a custom view which is some "bill" to send to your boss/client (table view)

** Expense reporting

** Daily task review

Take a moment to plan your day:

- Recently created (actions = today, later, done, delete)
- No due date (actions = tomorrow, in 2 days, next week, someday)
- Scheduled today (actions = today, later, done, delete)

#+begin_src emacs-lisp
    (add-to-list 'org-agenda-custom-commands
                 `("rd" "Daily review"
                   ((tags "LEVEL=2"
                          ((org-agenda-overriding-header "COLLECTBOX")
                           (org-agenda-files (list ,org-default-notes-file))))
                    (agenda ""
                            ((org-agenda-entry-types '(:timestamp :sexp))
                             (org-agenda-overriding-header "CALENDAR")
                             (org-agenda-span 'day)))
                    (agenda ""
                            ((org-agenda-entry-types '(:deadline))
                             (org-agenda-overriding-header "DUE DATES")
                             (org-agenda-skip-function
                              '(org-agenda-skip-entry-if 'todo 'done))
                             (org-agenda-sorting-strategy
                              '(priority-down time-down))
                             (org-agenda-span 'day)
                             (org-agenda-start-on-weekday nil)
                             (org-agenda-time-grid nil)))
                    (agenda ""
                            ((org-agenda-entry-types '(:scheduled))
                             (org-agenda-overriding-header "SCHEDULED")
                             (org-agenda-skip-function
                              '(org-agenda-skip-entry-if 'todo 'done))
                             (org-agenda-sorting-strategy
                              '(priority-down time-down))
                             (org-agenda-span 'day)
                             (org-agenda-start-on-weekday nil)
                             (org-agenda-time-grid nil)))
                    )
                   ((org-agenda-format-date "")
                    (org-agenda-start-with-clockreport-mode nil))) t)
#+end_src

*************** TODO Show overridden headers when in agenda view

Read [[http://gridwriter.com/2012/11/14/omnifocus-series-flags-due-dates-daily-review/][Flags, Due Dates, and Daily Review]].

** Weekly task review

1. Clear inbox for collecting
2. Review previous calendar data
3. Review upcoming calendar
4. Review (stuck) projects
5. Review (next) actions
6. Review waiting-for
7. Review someday/maybe

#+begin_src emacs-lisp
    (add-to-list 'org-agenda-custom-commands
                 '("rw" "Weekly review"
                   (
                    (tags "CATEGORY={@Collect}&LEVEL=2|TODO={NEW}"
                          ((org-agenda-overriding-header "NEW TASKS")))

                    (agenda ""
                            ((org-agenda-clockreport-mode t)
                             (org-agenda-format-date
                              (concat "\n"
                                      "%Y-%m-%d" " %a "
                                      (make-string (window-width) ?_)))
                             (org-agenda-overriding-header "PAST WEEK")
                             (org-agenda-prefix-format " %?-11t %i %-12:c% s")
                             (org-agenda-show-log 'clockcheck)
                             (org-agenda-span 7)
                             (org-agenda-start-day "-1w") ; recently done
                             (org-deadline-warning-days 0)))

                    (agenda ""
                            ((org-agenda-overriding-header "NEXT MONTH")
                             (org-agenda-span 'month)
                             (org-agenda-start-day "+0d")
                             (org-deadline-warning-days 0) ; XXX
                             ))

                    (todo "PROJ"
                          ((org-agenda-overriding-header "PROJECT LIST")))

                    ;; FIXME we should show which tasks (don't) have CLOCK lines: archived vs. deleted
                    (todo "DONE|PROJDONE"
                          ((org-agenda-overriding-header
                            "Candidates to be archived")))

                    ;; (stuck ""
                    ;;        ((org-agenda-overriding-header "Stuck projects")))

                    (todo "STRT"
                          ((org-agenda-overriding-header "IN PROGRESS")
                           (org-agenda-todo-ignore-scheduled nil)))

                    (todo "TODO"        ; don't include items from CollectBox! XXX
                          ((org-agenda-overriding-header "ACTION LIST")))

                    ;; ignore scheduled and deadline entries, as they're
                    ;; visible in the above agenda (for the past + for next
                    ;; month) or scheduled/deadline'd for much later...
                    (todo "WAIT"
                          ((org-agenda-format-date "")
                           (org-agenda-overriding-header "WAITING FOR")
                           (org-agenda-todo-ignore-deadlines 'all) ; future?
                           (org-agenda-todo-ignore-scheduled t)))

                    ;; same reasoning as for WAIT
                    (todo "SDAY"
                          ((org-agenda-format-date "")
                           (org-agenda-overriding-header "SOMEDAY")
                           (org-agenda-todo-ignore-deadlines 'all)
                           (org-agenda-todo-ignore-scheduled t)))

                   ;; ((org-agenda-clockreport-mode nil)
                   ;;  (org-agenda-prefix-format " %i %?-12t% s")
                   ;;  (org-agenda-write-buffer-name "Weekly task review"))
                   ;; "~/org-weekly-review.html") t)
                    )) t)
#+end_src

** Next

#+begin_src emacs-lisp
    (add-to-list 'org-agenda-custom-commands
                 '("rN" "Next"
                   tags-todo "TODO<>{SDAY}"
                   ((org-agenda-overriding-header "List of all TODO entries with no due date (no SDAY)")
                    (org-agenda-skip-function '(org-agenda-skip-entry-if 'deadline))
                    (org-agenda-sorting-strategy '(priority-down)))) t)
#+end_src

#+begin_note
If you don't want to show scheduled items, deadlines nor appointments in lists,
you can use either =(org-agenda-todo-ignore-with-date t)=,
=(org-agenda-skip-function '(org-agenda-skip-entry-if 'timestamp))= or
=(org-agenda-skip-function '(org-agenda-skip-entry-if 'scheduled 'deadline
'timestamp))=.

Though, we could make a performance comparison to see whether one is quicker
than the other.
#+end_note

** COMMENT Future

FIXME C'est scheduled qu'il faut checker, plutôt que deadline ?

#+begin_src emacs-lisp
    (add-to-list 'org-agenda-custom-commands
                 '("F" "Future"
                   tags-todo "TODO<>{SDAY}+DEADLINE>\"<+0d>\""
                   ((org-agenda-overriding-header "List of all TODO entries with future due date (no SDAY)")
                    (org-agenda-skip-function '(org-agenda-skip-entry-if 'notdeadline))
                    (org-agenda-sorting-strategy '(priority-down)))) t)
#+end_src

** Ticklers

If you can't get to work on something right now, but it's not too far o! in the
distance, you probably have a Tickler item on your hands. A tickler item, in
Omni- Focus, is an item with a start date in the future. This might be
a marathon you might participate in or a concert you might like to see. With
a start date in the future, it disappears for the time being, but is not lost
forever. You can add a start date to the project or action via the inspector or
the Start column in the outline.

An item with a start date in the future doesn't appear in ordinary OmniFocus
views. But when the start date comes around, the project or action appears
again, ready for you to decide what to do with it.

** Waiting for

Only allow one assignee per task. See
https://asana.com/guide/learn/tasks/assigning for techniques when this can't be
done.

See other people's tasks.

#+begin_src emacs-lisp
    (add-to-list 'org-agenda-custom-commands
                 '("rW" "Waiting for"
                   tags-todo "TODO={WAIT}"
                   ((org-agenda-overriding-header "Waiting for")
                    (org-agenda-sorting-strategy '(deadline-up)))) t) ; FIXME does not work
#+end_src

* MORE

#+begin_src emacs-lisp
    (add-to-list 'org-agenda-custom-commands
                 '("+" . "MORE...") t)
#+end_src

** Assigned to me

#+begin_src emacs-lisp
    ;; checking tasks that are assigned to me
    (add-to-list 'org-agenda-custom-commands
                 `("+a" "Assigned to me"
                   tags ,(concat "Assignee={" user-login-name "\\|"
                                 user-mail-address "}")
                   ((org-agenda-overriding-header "ASSIGNED TO ME"))) t)
#+end_src

** Tasks by assignee

** Email list

*************** TODO Have the hotlist emailed to you each day

See http://www.randomsample.de/dru5/node/61

: /usr/bin/yes p | /usr/local/bin/emacs -batch -l ~/.emacs -eval '(org-batch-agenda "#")' 2>/dev/null | /usr/bin/mailx -s'Stuck projects' me@example.com

** Print list

The *exported agenda views* are not *stored* when you use one of those commands
interactively because this might use too much overhead.  Instead, there is a
special command to produce all specified files in one step: =C-c a e=.

#+begin_note
To create PDF output, the GhostScript =ps2pdf= utility must be installed on the
system.
#+end_note

FIXME Changes
- Little checkbox
- No icon
- Proportional font
- No tag: =(setq org-agenda-hide-tags-regexp ".*")=

XXX See http://www.toodledo.com/tools/booklet.php:
Easily print your to-do list as a foldable booklet that you can put in your
pocket. Each booklet contains your hotlist, your top 110 most important tasks,
and a section for written notes. Assembly of the booklet is as simple as one
cut with a scissors and a few folds.

XXX See solution of Christian Egli:
http://orgmode.org/w/?p=org-mode.git;a=blob;f=contrib/scripts/org2hpda;hb=HEAD

#+begin_src emacs-lisp
    (add-to-list 'org-agenda-custom-commands
                 '("E" . "Exported agenda files...") t)

    ;; exporting agenda views
    (add-to-list 'org-agenda-custom-commands
                 '("Ea"
                   agenda ""
                   (;; (org-tag-faces nil)
                    (ps-landscape-mode t)
                    (ps-number-of-columns 1))
                   ("~/org-agenda.html" "~/org-agenda.pdf")) t)

    (add-to-list 'org-agenda-custom-commands
                 '("Ep" "Call list"
                   tags-todo "phone"
                   ((org-agenda-prefix-format " %-20:c [ ] " )
                    (org-agenda-remove-tags t)
                    ;; (org-agenda-with-colors nil)
                    (org-agenda-write-buffer-name
                     "Phone calls that you need to make")
                    (ps-landscape-mode t)
                    (ps-number-of-columns 1))
                   ("~/org___calls.pdf")) t)
#+end_src

You can save any list or agenda view as PDF by writing it to a file (via
=C-x C-w=).

* ARCHIVE

Archiving a project (or action) consists in hiding its contents from view (and
from search?).

Archive projects that have been completed or deferred, so you can focus on more
active projects.

#+begin_src emacs-lisp
    (add-to-list 'org-agenda-custom-commands
                 '("A" . "ARCHIVE...") t)
#+end_src

#+begin_src emacs-lisp
    (add-to-list 'org-agenda-custom-commands
                 '("Aa" "Archive"
                   ((tags-todo "ARCHIVE"))
                   ((org-agenda-todo-ignore-scheduled 'future)
                    (org-agenda-sorting-strategy '(deadline-down)))) t)
#+end_src

* REFERENCE

#+begin_src emacs-lisp
    (add-to-list 'org-agenda-custom-commands
                 '("R" . "REFERENCE...") t)
#+end_src

** Search

Search any word or regexp within your task name or in the note field:

#+begin_src emacs-lisp
    (add-to-list 'org-agenda-custom-commands
                 '("Rs" "Like s, but with extra files"
                   search ""
                   ((org-agenda-text-search-extra-files
                     ;; FIXME Add `agenda-archives'
                     leuven-org-search-extra-files))) t)
#+end_src

*************** TODO Add =S= to search in all files, but not into DONE tasks
*************** END

#+begin_src emacs-lisp
    (add-to-list 'org-agenda-custom-commands
                 '("RS" "Like s, but only TODO entries"
                   search ""
                   ((org-agenda-text-search-extra-files
                     ;; FIXME Add `agenda-archives'
                     leuven-org-search-extra-files))) t)
#+end_src

** Notes

#+begin_src emacs-lisp
    (add-to-list 'org-agenda-custom-commands
                 '("Rn" "Organize thoughts to refile"
                   tags "refile|capture"
                   ((org-agenda-overriding-header "Refile stuff"))) t)
#+end_src

* Task markers (in the current buffer)

#+begin_src emacs-lisp
    ;; create a sparse tree (current buffer only) with all entries containing
    ;; the word `TODO', `FIXME' or `XXX'
    (add-to-list 'org-agenda-custom-commands
                 '("1" "Task markers (in current buffer)"
                   occur-tree "\\<TODO\\|FIXME\\|XXX\\>") t)
#+end_src

* Buggy commands
  :PROPERTIES:
  :tangle:   no
  :END:

#+begin_src emacs-lisp
    (add-to-list 'org-agenda-custom-commands
                 '("Ee" "Print reports (TODO)"
                   ;; See ThinkingRock examples
                   ((agenda ""
                            ((org-agenda-overriding-header "Scheduled TODO's")
                             (org-agenda-prefix-format "%8e ")
                             (org-agenda-skip-function
                              '(org-agenda-skip-entry-if 'regexp "habit"))
                             (org-agenda-sorting-strategy '(todo-state-up))
                             (org-agenda-span 'week)
                             (org-agenda-todo-keyword-format "%-4s")))
                    (tags-todo "thisweek"
                               ((org-agenda-overriding-iding-header
                                 "Unscheduled TODO's; also tasks (from which todo's were generated)")
                                (org-agenda-prefix-format "%-7e")
                                (org-agenda-skip-function
                                 '(org-agenda-skip-entry-if 'scheduled))
                                (org-agenda-sorting-strategy '(todo-state-up))
                                (org-agenda-todo-keyword-format "%-10s"))))
                   ((org-agenda-remove-tags t))
                   ("~/org___agenda-de.html")) t)
#+end_src

#+begin_src emacs-lisp
    (add-to-list 'org-agenda-custom-commands
                 '("," . "Priorities...") t)

    ;; list only priority A tasks for the current day
    (add-to-list 'org-agenda-custom-commands
                 '(",A" "Priority #A tasks for today"
                   agenda ""
                   ((org-agenda-skip-function
                     '(org-agenda-skip-entry-if 'notregexp "\\=.*\\[#A\\]"))
                    (org-agenda-span 'day)
                    (org-agenda-overriding-header
                     "Today's priority #A tasks: "))) t)

    ;; list priority A and B tasks for the current day
    (add-to-list 'org-agenda-custom-commands
                 '(",B" "Priority #A and #B tasks for today"
                   agenda ""
                   ((org-agenda-overriding-header
                     "Today's priority #A and #B tasks: ")
                    (org-agenda-skip-function
                     '(org-agenda-skip-entry-if 'regexp "\\=.*\\[#C\\]"))
                    (org-agenda-span 'day))) t)
#+end_src

#+begin_src emacs-lisp
    ;; (add-to-list 'org-agenda-custom-commands
    ;;              '("A" . "0. Agenda...") t)
    ;;
    ;; (add-to-list 'org-agenda-custom-commands
    ;;              '("AF" "Agenda of upcoming due dates (6 months)"
    ;;                ;; FIXME We don't see DEADLINE with `-1m' (or so)
    ;;                ;; specifications (if they are more than 1m ahead of now)!
    ;;                agenda ""
    ;;                ((org-agenda-skip-function
    ;;                  '(org-agenda-skip-entry-if 'notdeadline))
    ;;                 (org-agenda-span 'day)
    ;;                 (org-agenda-time-grid nil)
    ;;                 (org-deadline-warning-days 183))) t)
    ;;              ;; Some SCHEDULED are shown (when paired with a deadline and
    ;;              ;; scheduled in the past or for today)
#+end_src

* Unused code

#+begin_src emacs-lisp :tangle no
  ("d" "Daily Agenda"
   ((agenda ""
            ((org-agenda-todo-keyword-format "")
             (org-agenda-remove-tags t)))
    (tags "LEVEL=2+goals"
          ((org-agenda-remove-tags t)
           (org-agenda-prefix-format "  ")
           (org-agenda-todo-keyword-format "")))
    (todo "TODO"
          ((org-agenda-sorting-strategy '(tag-up))
           (org-agenda-show-inherited-tags nil)
           (org-agenda-todo-keyword-format "")))
    (todo "STRT"
          ((org-agenda-todo-keyword-format "")))
    (stuck ""
           ((org-agenda-remove-tags t)))))

  ("p" "Printed agenda"
   ((agenda ""
            ((org-agenda-span 'week)
             (org-agenda-start-on-weekday nil)
             (org-agenda-time-grid nil)
             ;; (org-agenda-repeating-timestamp-show-all t)
             (org-agenda-prefix-format "  -->  %t %s")
             (org-agenda-skip-function
              '(org-agenda-skip-entry-if 'deadline 'scheduled))))
    (agenda ""
            ((org-agenda-span 'day)
             (org-agenda-sorting-strategy '(time-up tag-up))
             (org-agenda-todo-keyword-format "[ ]")
             (org-agenda-scheduled-leaders '("" ""))
             (org-agenda-skip-function '(org-agenda-skip-entry-if 'deadline))
             (org-agenda-prefix-format "%t %T %s")
             ))
    (agenda ""
            ((org-agenda-span 'day)
             (org-deadline-warning-days 7)
             (org-agenda-time-grid nil)
             (org-agenda-include-diary nil)
             (org-agenda-todo-keyword-format "[ ]")
             (org-agenda-scheduled-leaders '("" ""))
             (org-agenda-overriding-header "Due Dates:")
             (org-agenda-skip-function '(org-agenda-skip-entry-if 'notdeadline))
             (org-agenda-prefix-format "%t %s")))
    (todo "TODO|STRT"
          ((org-agenda-sorting-strategy '(tag-up priority-down))
           (org-agenda-todo-ignore-with-date t)))
    (todo "WAIT"))
   ((org-agenda-with-colors nil)
    (org-agenda-prefix-format "%T [ ]")
    (org-agenda-todo-keyword-format "")
    (org-agenda-remove-tags t)
    (ps-number-of-columns 2)
    ;; (ps-print-header nil)
    (ps-landscape-mode t))
   ("~/org___agenda-storage.pdf"))

  ("P" "Projects"
   ((agenda ""
            ((org-agenda-skip-function
              '(org-agenda-skip-entry-if 'notregexp "* PROJ"))
             (org-agenda-include-diary nil)
             (org-agenda-time-grid nil)))
    (todo "PROJ"
          ((org-agenda-todo-ignore-deadlines t)
           (org-agenda-sorting-strategy '(priority-down))))))
#+end_src

* Test cases

- Entries with no TODO keyword, but well with a DEADLINE.
- Scheduled date, but no deadline
- Scheduled date and deadline
  + on the same date
  + on different dates
- No scheduled date, well a deadline
- SDAY with a deadline date
- Entries with "timed" dates

* COMMENT Org mode

** Lists

1. Inbox
2. Today
3. Next
4. Tomorrow
5. Scheduled
6. Someday
7. Waiting for

#+begin_src emacs-lisp
(progn

    (setq org-agenda-custom-commands nil)

    (add-to-list 'org-agenda-custom-commands
                 '("0" "Calendar for today" ;; for the events
                   agenda ""
                   ((org-agenda-overriding-header "Calendar for today")
                    (org-agenda-entry-types '(:timestamp :sexp))
                    (org-agenda-span 'day)
                    (org-agenda-sorting-strategy '(time-up))
                    (org-agenda-time-grid '((daily remove-match)
                                            ""
                                            (800 1000 1200 1400 1600 1800 2000))))) t)

    (add-to-list 'org-agenda-custom-commands
                 '("1" "Inbox"
                   tags-todo "TODO={NEW}"
                   ((org-agenda-overriding-header "Inbox")
                    (org-agenda-sorting-strategy '(category-up)))) t)

    ;; sorting by ascendant deadline does not work
    (add-to-list 'org-agenda-custom-commands
                 '("2" "Today"
                   tags-todo "SCHEDULED<\"<tomorrow>\"|DEADLINE<\"<tomorrow>\"" ;; for tasks with a time component for today
                   ((org-agenda-overriding-header "Today")
                    (org-agenda-sorting-strategy '(deadline-up)))) t)

    (add-to-list 'org-agenda-custom-commands
                 '("3" "Next"
                   tags-todo "TODO<>{NEW\\|SDAY\\|WAIT}"
                   ((org-agenda-overriding-header "Next")
                    (org-agenda-skip-function '(org-agenda-skip-entry-if 'scheduled))
                    (org-agenda-sorting-strategy '(deadline-up)))) t)

    (add-to-list 'org-agenda-custom-commands
                 '("4" "Tomorrow"
                   tags-todo "SCHEDULED>=\"<+1d>\"+SCHEDULED<\"<+2d>\""
                   ((org-agenda-overriding-header "Tomorrow")
                    (org-agenda-sorting-strategy '(deadline-up)))) t)

    (add-to-list 'org-agenda-custom-commands
                 '("6" "Someday"
                   tags-todo "TODO={SDAY}"
                   ((org-agenda-overriding-header "Someday")
                    (org-agenda-sorting-strategy '(deadline-up)))) t)

    (add-to-list 'org-agenda-custom-commands
                 '("7" "Waiting for"
                   tags-todo "TODO={WAIT}"
                   ((org-agenda-overriding-header "Waiting for")
                    (org-agenda-sorting-strategy '(deadline-up)))) t)

)
#+end_src

#+begin_src emacs-lisp
    (add-to-list 'org-agenda-custom-commands
                 '("Z" "Full list"
                   ((agenda ""
                            ((org-agenda-overriding-header "Calendar for today")
                             (org-agenda-entry-types '(:timestamp :sexp))
                             (org-agenda-span 'day)
                             (org-agenda-sorting-strategy '(time-up))
                             (org-agenda-time-grid '((daily remove-match)
                                                     ""
                                                     (800 1000 1200 1400 1600 1800 2000)))))

                   (tags-todo "TODO={NEW}"
                               ((org-agenda-overriding-header "Inbox")
                                (org-agenda-sorting-strategy '(category-up))))

                   (tags-todo "SCHEDULED<\"<tomorrow>\"|DEADLINE<\"<tomorrow>\"" ;; for tasks with a time component for today
                               ((org-agenda-overriding-header "Today")
                                (org-agenda-sorting-strategy '(deadline-up))))

                   (tags-todo "TODO<>{NEW\\|SDAY\\|WAIT}"
                               ((org-agenda-overriding-header "Next")
                                (org-agenda-skip-function '(org-agenda-skip-entry-if 'scheduled))
                                (org-agenda-sorting-strategy '(deadline-up))))

                   (tags-todo "SCHEDULED>=\"<+1d>\"+SCHEDULED<\"<+2d>\""
                               ((org-agenda-overriding-header "Tomorrow")
                                (org-agenda-sorting-strategy '(deadline-up))))

                   (tags-todo "TODO={SDAY}"
                               ((org-agenda-overriding-header "Someday")
                                (org-agenda-sorting-strategy '(deadline-up))))
;; ignore DEADLINE < tomorrow
                   (tags-todo "TODO={WAIT}"
                               ((org-agenda-overriding-header "Waiting for")
                                (org-agenda-sorting-strategy '(deadline-up)))))) t)
#+end_src

Chercher l'erreur :

- WAIT avec ASSIGNEE property
- DLGT sans ASSIGNEE property
- SDAY avec SCHEDULED date
- WAIT avec SCHEDULED (plutôt que DEADLINE)

#+begin_src emacs-lisp
(progn

    (setq org-agenda-custom-commands nil)

    (add-to-list 'org-agenda-custom-commands
                 '("E1" "Someday with a SCHEDULED date"
                   tags-todo "TODO={SDAY}"
                   ((org-agenda-overriding-header "Someday")
                    (org-agenda-skip-function '(org-agenda-skip-entry-if 'notscheduled))
                    (org-agenda-sorting-strategy '(deadline-up)))) t)


    (defun org-cmp-assignee (a b)
      "Compare the assignee values of strings A and B."
      (let ((aa (or (get-text-property 1 'assignee a) ""))
            (ab (or (get-text-property 1 'assignee b) "")))
        (cond ((string-lessp aa ab) -1)
              ((string-lessp ab aa) +1)
              (t nil)                   ; same assignee
              )))

    (setq org-agenda-sorting-strategy
          (quote ((agenda user-defined-up)
                  (todo user-defined-up)
                  (tags user-defined-up)
                  (search user-defined-up))))

    (setq org-agenda-cmp-user-defined 'org-cmp-assignee)

    (add-to-list 'org-agenda-custom-commands
                 '("E7" "Delegated"
                   tags-todo "TODO={WAIT}"
                   ((org-agenda-overriding-header "Waiting For")
                    (org-agenda-skip-function '(org-agenda-skip-entry-if 'scheduled))
                    (org-agenda-sorting-strategy '(user-defined-up))
                    (org-agenda-cmp-user-defined 'org-cmp-assignee)
                    (org-agenda-overriding-columns-format "%80ITEM(Task) %32Assignee(Assignee)")
                    (org-agenda-view-columns-initially t)
                   )) t)
)
#+end_src

Ignore scheduled?
1. =(org-agenda-skip-function '(org-agenda-skip-entry-if 'scheduled))= WORKS
2. =org-agenda-todo-ignore-scheduled=

* Tips and tricks

** DEADLINE

Writing =DEADLINE={}= is wrong. You must write:

: DEADLINE=""

** Tasks with a time component

To be sure to get tasks with a time component in the lists, use

    < <tomorrow>

instead of

    = <today>

** Cas d'erreurs

|              | no state  | with TODO                |
|--------------+-----------+--------------------------|
| active ts    | in agenda | in agenda                |
| scheduled ts | in agenda | in agenda + in tags-todo |

Les cas:

- sans state mais avec SCHEDULED date
- avec state mais un timestamp actif

devraient être considérés comme erronés...
